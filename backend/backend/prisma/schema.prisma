generator client {
  provider = "prisma-client-js"
  output   = "../backend/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String
  email         String         @unique
  password      String
  questions     Question[] // One user can ask many questions
  answers       Answer[] // One user can write many answers
  notifications Notification[] // One user can receive many notifications
  answerVotes   AnswerVote[] // ➕ User's votes on answers
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Question {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  upvotes       Int            @default(0)
  downvotes     Int            @default(0)
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  answers       Answer[]
  tags          Tag[]          @relation("QuestionTags")
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  questions Question[] @relation("QuestionTags")
}

model Answer {
  id         Int          @id @default(autoincrement())
  content    String
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  question   Question     @relation(fields: [questionId], references: [id])
  questionId Int
  upvotes    Int          @default(0)
  downvotes  Int          @default(0)
  votes      AnswerVote[] // ➕ all votes on this answer
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Notification {
  id         Int       @id @default(autoincrement())
  message    String
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  question   Question? @relation(fields: [questionId], references: [id])
  questionId Int?
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
}

model AnswerVote {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  answer    Answer   @relation(fields: [answerId], references: [id])
  answerId  Int
  type      VoteType
  createdAt DateTime @default(now())

  @@unique([userId, answerId]) // ⛔ Prevents duplicate voting
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
